
from IPython.html.widgets import interact, fixed
from IPython.display import display

%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import sympy as sym

def logistic_map(x,r):
    x_s = r * x * (1 - x)
    return x_s

Para encontrar el punto fijo cuando r=2
r = 2
print 1-1.0/r

x = sym.Symbol('x')
r = sym.Symbol('r')
f = sym.Function('f')
f = r * x * (1 - x)

def grafica (x_0, r):
    y = np.zeros(N)
    y[0] = x_0
    x = np.linspace(0, N, N)
    for i in range (1, N):
        y[i] = logistic_map(y[i-1], r)
    return x, y
N = 100

def graf (x_0, r):
    plt.plot(gr(x_0,r)[0], gr(x_0,r)[1])
    plt.ylim(0,1)

interact(graf, x_0 = 0.5, r = 2.97);

def iteraciones(g, x0, N, r):
    f = x0
    for i in range (0, N):
        f = g(f, r)
    return f
def Iter_Lista(g, x0, N, r):
    lista = np.zeros(N)
    lista[0] = x0
    for i in range (1, N):
        lista[i] = iterar(g, x0, i, r)
    return lista

iterarLista(logistic_map, 0.5, 100, 0.8)

array([  5.00000000e-01,   2.00000000e-01,   1.28000000e-01,
         8.92928000e-02,   6.50556767e-02,   4.86587485e-02,
         3.70328598e-02,   2.85291416e-02,   2.21721838e-02,
         1.73444624e-02,   1.36349056e-02,   1.07591960e-02,
         8.51474856e-03,   6.75379809e-03,   5.36654744e-03,
         4.27019809e-03,   3.40157080e-03,   2.71200009e-03,
         2.16371612e-03,   1.72722756e-03,   1.37939540e-03,
         1.10199413e-03,   8.80623792e-04,   7.03878635e-04,
         5.62706552e-04,   4.49911931e-04,   3.59767608e-04,
         2.87710540e-04,   2.30102210e-04,   1.84039411e-04,
         1.47204432e-04,   1.17746210e-04,   9.41858769e-05,
         7.53416048e-05,   6.02687427e-05,   4.82120883e-05,
         3.85678111e-05,   3.08530589e-05,   2.46816856e-05,
         1.97448611e-05,   1.57955770e-05,   1.26362620e-05,
         1.01088819e-05,   8.08702375e-06,   6.46956668e-06,
         5.17561986e-06,   4.14047446e-06,   3.31236585e-06,
         2.64988390e-06,   2.11990151e-06,   1.69591761e-06,
         1.35673179e-06,   1.08538396e-06,   8.68306223e-07,
         6.94644375e-07,   5.55715114e-07,   4.44571844e-07,
         3.55657317e-07,   2.84525753e-07,   2.27620537e-07,
         1.82096388e-07,   1.45677084e-07,   1.16541650e-07,
         9.32333094e-08,   7.45866406e-08,   5.96693080e-08,
         4.77354436e-08,   3.81883530e-08,   3.05506813e-08,
         2.44405443e-08,   1.95524349e-08,   1.56419476e-08,
         1.25135579e-08,   1.00108462e-08,   8.00867689e-09,
         6.40694146e-09,   5.12555313e-09,   4.10044248e-09,
         3.28035397e-09,   2.62428317e-09,   2.09942653e-09,
         1.67954122e-09,   1.34363297e-09,   1.07490638e-09,
         8.59925102e-10,   6.87940081e-10,   5.50352064e-10,
         4.40281651e-10,   3.52225321e-10,   2.81780257e-10,
         2.25424205e-10,   1.80339364e-10,   1.44271491e-10,
         1.15417193e-10,   9.23337544e-11,   7.38670035e-11,
         5.90936028e-11,   4.72748822e-11,   3.78199058e-11,
         3.02559246e-11])


plt.plot(Iter_Lista(logistic_map, 0.5, 100, 2.8)[:99], Iter_Lista(logistic_map, 0.5, 100, 2.8)[1:])
plt.ylim(0,1);


x = np.zeros(2*N+1)
y = np.zeros(2*N+1)
ls = Iter_Lista(logistic_map, 0.5, 100, 2.9)
y[0] = ls[0]
for i in range (0, N - 1):
    x[2*i] = ls[i]
    x[2*i + 1] = ls[i]
    y[2*i + 1] = ls[i + 1]
    y[2*i + 2] = ls[i + 1]
print y

array([ 0.5       ,  0.725     ,  0.725     ,  0.5781875 ,  0.5781875 ,
        0.70727147,  0.70727147,  0.60041176,  0.60041176,  0.69576069,
        0.69576069,  0.61386548,  0.61386548,  0.68740049,  0.68740049,
        0.62315506,  0.62315506,  0.68101521,  0.68101521,  0.62997713,
        0.62997713,  0.67600724,  0.67600724,  0.63516221,  0.63516221,
        0.67202041,  0.67202041,  0.63918603,  0.63918603,  0.66881902,
        0.66881902,  0.6423504 ,  0.6423504 ,  0.66623545,  0.66623545,
        0.64486075,  0.64486075,  0.66414456,  0.66414456,  0.64686404,
        0.64686404,  0.66244977,  0.66244977,  0.64846921,  0.64846921,
        0.66107499,  0.66107499,  0.64975906,  0.64975906,  0.65995945,
        0.65995945,  0.65079762,  0.65079762,  0.65905422,  0.65905422,
        0.65163509,  0.65163509,  0.65831972,  0.65831972,  0.65231111,
        0.65231111,  0.65772384,  0.65772384,  0.65285725,  0.65285725,
        0.65724052,  0.65724052,  0.65329872,  0.65329872,  0.65684856,
        0.65684856,  0.65365573,  0.65365573,  0.65653075,  0.65653075,
        0.65394456,  0.65394456,  0.65627311,  0.65627311,  0.65417827,
        0.65417827,  0.65606428,  0.65606428,  0.65436743,  0.65436743,
        0.65589502,  0.65589502,  0.65452055,  0.65452055,  0.65575785,
        0.65575785,  0.65464452,  0.65464452,  0.65564671,  0.65564671,
        0.6547449 ,  0.6547449 ,  0.65555665,  0.65555665,  0.65482617,
        0.65482617,  0.65548368,  0.65548368,  0.65489199,  0.65489199,
        0.65542457,  0.65542457,  0.65494529,  0.65494529,  0.65537667,
        0.65537667,  0.65498846,  0.65498846,  0.65533787,  0.65533787,
        0.65502342,  0.65502342,  0.65530644,  0.65530644,  0.65505173,
        0.65505173,  0.65528098,  0.65528098,  0.65507467,  0.65507467,
        0.65526036,  0.65526036,  0.65509324,  0.65509324,  0.65524365,
        0.65524365,  0.65510829,  0.65510829,  0.65523012,  0.65523012,
        0.65512047,  0.65512047,  0.65521915,  0.65521915,  0.65513034,
        0.65513034,  0.65521027,  0.65521027,  0.65513834,  0.65513834,
        0.65520308,  0.65520308,  0.65514481,  0.65514481,  0.65519725,
        0.65519725,  0.65515006,  0.65515006,  0.65519253,  0.65519253,
        0.6551543 ,  0.6551543 ,  0.65518871,  0.65518871,  0.65515774,
        0.65515774,  0.65518562,  0.65518562,  0.65516053,  0.65516053,
        0.65518311,  0.65518311,  0.65516279,  0.65516279,  0.65518108,
        0.65518108,  0.65516462,  0.65516462,  0.65517943,  0.65517943,
        0.6551661 ,  0.6551661 ,  0.6551781 ,  0.6551781 ,  0.6551673 ,
        0.6551673 ,  0.65517702,  0.65517702,  0.65516827,  0.65516827,
        0.65517614,  0.65517614,  0.65516906,  0.65516906,  0.65517543,
        0.65517543,  0.6551697 ,  0.6551697 ,  0.65517486,  0.65517486,
        0.65517021,  0.65517021,  0.6551744 ,  0.6551744 ,  0.        ,  0.        ])


plt.plot(x,y)
plt.ylim(0,1);


import math
from PIL import Image
imgx = 1000
imgy = 500
image = Image.new(RGB, (imgx, imgy))

xa = 0.0
xb = 4.0
maxit = 5000





